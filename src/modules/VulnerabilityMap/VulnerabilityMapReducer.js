import _ from 'lodash';
import { Types } from './VulnerabilityMapActions';

const STATE = {
  admin1: true,
  admin2: false,
  admin3: false,
  loading: false,
  geoJson: null,
  data: {},
  indicator: null
};

export class VulnerabilityMapReducer {
  reduce(state, action) {
    switch (action.type) {
      case Types.VULNERABILITY_CHANGELEVEL_REQUEST: {
        const newLevel = action.payload;
        switch (newLevel) {
          case 'admin1':
            state.vulnerability = {
              ...state.vulnerability,
              admin1: true,
              admin2: false,
              admin3: false
            };
            break;
          case 'admin2':
            state.vulnerability = {
              ...state.vulnerability,
              admin1: false,
              admin2: true,
              admin3: false
            };
            break;
          case 'admin3':
            state.vulnerability = {
              ...state.vulnerability,
              admin1: false,
              admin2: false,
              admin3: true
            };
            break;
          default:
            console.err(`Invalid admin level received: ${newLevel}`);
            break;
        }
        state.vulnerability.loading = true;
        break;
      }
      case Types.VULNERABILITY_CHANGELEVEL_SUCCESS: {
        state.vulnerability.geoJson = action.payload;
        state.vulnerability.loading = false;
        break;
      }
      case Types.VULNERABILITY_CHANGELEVEL_ERROR: {
        state.vulnerability.error = action.payload;
        state.vulnerability.loading = false;
        break;
      }
      case Types.VULNERABILITY_FETCH_REQUEST: {
        state.vulnerability = {
          loading: true,
          indicator: action.payload,
          ...state.vulnerability
        };

        break;
      }
      case Types.VULNERABILITY_FETCH_SUCCESS: {
        state.vulnerability.loading = false;
        const { currentLevel, data, indicator } = action.payload;

        state.vulnerability.data[currentLevel] = data;
        state.vulnerability.data.current = data;
        state.vulnerability.indicator = indicator;
        break;
      }
      case Types.VULNERABILITY_FETCH_ERROR: {
        state.vulnerability.error = action.payload;
        state.vulnerability.loading = false;
        break;
      }
      default:
        return null;
    }

    return state;
  }
}

export const INITIAL_STATE = _.cloneDeep(STATE);
