import axios from 'axios';
import { getApiServer } from "../../config";

export const Types = {
  VULNERABILITY_CHANGELEVEL_REQUEST: 'VULNERABILITY/CHANGELEVEL/REQUEST',
  VULNERABILITY_CHANGELEVEL_SUCCESS: 'VULNERABILITY/CHANGELEVEL/SUCCESS',
  VULNERABILITY_CHANGELEVEL_ERROR: 'VULNERABILITY/CHANGELEVEL/ERROR',

  VULNERABILITY_FETCH_REQUEST: 'VULNERABILITY/FETCH/REQUEST',
  VULNERABILITY_FETCH_SUCCESS: 'VULNERABILITY/FETCH/SUCCESS',
  VULNERABILITY_FETCH_ERROR: 'VULNERABILITY/FETCH/ERROR'
};

function fetchAdminsRequest(adminLevel) {
  return {
    type: Types.VULNERABILITY_CHANGELEVEL_REQUEST,
    payload: adminLevel
  };
}

function fetchAdminsSuccess(geoJson) {
  return {
    type: Types.VULNERABILITY_CHANGELEVEL_SUCCESS,
    payload: geoJson
  };
}

function fetchAdminsError(error) {
  return {
    type: Types.VULNERABILITY_CHANGELEVEL_ERROR,
    payload: error
  };
}

function fetchRequest(indicator) {
  return {
    type: Types.VULNERABILITY_FETCH_REQUEST,
    payload: indicator
  };
}
function fetchSuccess(data) {
  return {
    type: Types.VULNERABILITY_FETCH_SUCCESS,
    payload: data
  };
}
function fetchError(error) {
  return {
    type: Types.VULNERABILITY_FETCH_ERROR,
    payload: error
  };
}

export const Actions = {
  changeAdminLevel: (adminLevel) => {
    let url;
    switch (adminLevel) {
      case 'admin1':
        url = `${getApiServer()}/api/Geographies/Admin1`;
        break;
      case 'admin2':
        url = `${getApiServer()}/api/Geographies/Admin2`;
        break;
      case 'admin3':
        url = `${getApiServer()}/api/Geographies/Admin3`;
        break;
      default:
        console.err(`Invalid admin level ${adminLevel}`);
        break;
    }

    return (dispatch, getState) => {
      dispatch(fetchAdminsRequest(adminLevel));
      axios
        .get(url)
        .then((response) => {
          if (getState().vulnerability.indicator) {
            dispatch(Actions.fetchVulnerabilityData(getState().vulnerability.indicator));
          }
          dispatch(fetchAdminsSuccess(response.data));
        })
        .catch((error) => {
          dispatch(fetchAdminsError(error));
        });
    };
  },
  fetchVulnerabilityData: (indicator) => (dispatch, getState) => {
    const state = getState();
    // current admin level

    const currentAdminLevel = state.vulnerability.admin1
      ? 'admin1'
      : state.vulnerability.admin2
      ? 'admin2'
      : state.vulnerability.admin3
      ? 'admin3'
      : 'unknown';

    if (state.vulnerability.data[currentAdminLevel]) {
      dispatch(
        fetchSuccess({
          indicator,
          currentLevel: currentAdminLevel,
          data: getState().vulnerability.data[currentAdminLevel]
        })
      );
    } else {
      // data needs to be fetched
      dispatch(fetchRequest(indicator));
      let url;
      switch (currentAdminLevel) {
        case 'admin1':
          url = `${getApiServer()}/api/VulnerabilityData/Admin1`;
          break;
        case 'admin2':
          url = `${getApiServer()}/api/VulnerabilityData/Admin2`;
          break;
        case 'admin3':
          url = `${getApiServer()}/api/VulnerabilityData/Admin3`;
          break;
        default:
          console.err(`Invalid admin level received: ${currentAdminLevel}`);
          break;
      }

      axios
        .get(url)
        .then((response) => {
          dispatch(fetchSuccess({ indicator, currentLevel: currentAdminLevel, data: response.data }));
        })
        .catch((error) => {
          dispatch(fetchError(error));
        });
    }
  }
};
