import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Map, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import {
 Container, Button, Row, Col, Tooltip 
} from 'reactstrap';
import L from 'leaflet';
import ContainerDimensions from 'react-container-dimensions';
import ACTIONS from '../../modules/action';
import IndicatorDescription from './VulnerabilityMap/IndicatorDescription';

import './style.scss';
import t from '../../i18n';

import VulnerabilityMapLayer from './VulnerabilityMap/VulnerabilityMapLayer';

class VulnerabilityMap extends Component {
  constructor(props) {
    super(props);

    this.mapRef = React.createRef();
    this.textRef = React.createRef();

    this.state = {
      tooltipVIAOpen: false,
      tooltipFFNNOpen: false,
      tooltipVIAFFNNOpen: false,

      loading: {
        via: false,
        ffnn: false,
        viaffnn: false
      }
    };

    console.log('PROPS', this.props);
    this.indicatorLoading = this.indicatorLoading.bind(this);
  }

  indicatorLoading(indicator, loadingState) {
    this.setState({
      loading: {
        [indicator]: loadingState,
        ...this.state.loading
      }
    });
  }

  render() {
    const loading = () => (
      <div className="sk-circle">
        <div className="sk-circle1 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle2 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle3 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle4 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle5 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle6 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle7 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle8 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle9 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle10 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle11 sk-child" style={{ zIndex: 5000 }} />
        <div className="sk-circle12 sk-child" style={{ zIndex: 5000 }} />
      </div>
    );

    const map = (height) => {
      const h = this.textRef.current ? this.textRef.current.getHeight() + 30 : 0;

      return (
        <div id="container" style={{ height: '100%' }}>
          <Map ref={this.mapRef} style={{ height: height - h }}>
            <TileLayer
              attribution=""
              subdomains="abcd"
              url={`https://cartodb-basemaps-c.global.ssl.fastly.net/light_nolabels/{z}/{x}/{y}${
                L.Browser.retina ? '@2x.png' : '.png'
              }`}
            />
            {this.props.vulnerability.loading ? loading() : ''}

            <VulnerabilityMapLayer mapRef={this.mapRef} indicatorLoading={this.indicatorLoading} />

            {/* { legend() } */}
          </Map>
        </div>
      );
    };

    const getLanguage = () => {
      return this.props.language;
    };

    return (
      <ContainerDimensions>
        {({ width, height }) => (
          <Container fluid style={{ padding: '0 0px', width, marginTop: -13 }}>
            <Row
              style={{
                alignItems: 'center',
                marginRight: 10,
                marginLeft: 10,
                marginBottom: 10,
                padding: '5px 0px 5px 0px',
                backgroundColor: 'lightgray'
              }}
            >
              <Col xs="auto" style={{ paddingLeft: 2, paddingRight: 2 }}>
                <label style={{ verticalAlign: 'text-bottom', marginBottom: 0, marginLeft: 20 }}>
                  {t('vulnerability.map.labels.indicators', { lang: getLanguage() })}
:
                </label>
              </Col>
              <Col xs="auto" style={{ paddingLeft: 2, paddingRight: 2 }}>
                <Button
                  id="btnVIA"
                  style={{ width: 80 }}
                  size="sm"
                  color={this.props.vulnerability.indicator === 'via' ? 'danger' : 'primary'}
                  onClick={() => this.props.fetchVulnerabilityData('via')}
                >
                  {t('vulnerability.map.buttons.VIA', { lang: getLanguage() })}
                </Button>
                <Tooltip
                  placement="top"
                  isOpen={this.state.tooltipVIAOpen}
                  target="btnVIA"
                  toggle={() => {
                    this.setState({ tooltipVIAOpen: !this.state.tooltipVIAOpen });
                  }}
                >
                  {t('vulnerability.map.buttons.VIA.tooltip', { lang: getLanguage() })}
                </Tooltip>
              </Col>
              <Col xs="auto" style={{ paddingLeft: 2, paddingRight: 2 }}>
                <Button
                  id="btnFFNN"
                  style={{ width: 80 }}
                  size="sm"
                  color={this.props.vulnerability.indicator === 'ffnn' ? 'danger' : 'primary'}
                  onClick={() => this.props.fetchVulnerabilityData('ffnn')}
                >
                  {t('vulnerability.map.buttons.FFNN', { lang: getLanguage() })}
                </Button>
                <Tooltip
                  placement="top"
                  isOpen={this.state.tooltipFFNNOpen}
                  target="btnFFNN"
                  toggle={() => {
                    this.setState({ tooltipFFNNOpen: !this.state.tooltipFFNNOpen });
                  }}
                >
                  {t('vulnerability.map.buttons.FFNN.tooltip', { lang: getLanguage() })}
                </Tooltip>
              </Col>
              <Col xs="auto" style={{ paddingLeft: 2, paddingRight: 2 }}>
                <Button
                  id="btnVIAFFNN"
                  style={{ width: 100 }}
                  size="sm"
                  color={this.props.vulnerability.indicator === 'viaffnn' ? 'danger' : 'primary'}
                  onClick={() => this.props.fetchVulnerabilityData('viaffnn')}
                >
                  {t('vulnerability.map.buttons.VIAFFNN', { lang: getLanguage() })}
                </Button>
                <Tooltip
                  placement="top"
                  isOpen={this.state.tooltipVIAFFNNOpen}
                  target="btnVIAFFNN"
                  toggle={() => {
                    this.setState({ tooltipVIAFFNNOpen: !this.state.tooltipVIAFFNNOpen });
                  }}
                >
                  {t('vulnerability.map.buttons.VIAFFNN.tooltip', { lang: getLanguage() })}
                </Tooltip>
              </Col>
            </Row>
            <IndicatorDescription ref={this.textRef} />

            {map(height)}
          </Container>
        )}
      </ContainerDimensions>
    );
  }
}

const mapStateToProps = (state) => ({
  language: state.language,
  vulnerability: state.vulnerability
});

const mapDispatchToProps = (dispatch) => ({
  changeAdminLevel: (newLevel) => dispatch(ACTIONS.VULNERABILITY.changeAdminLevel(newLevel)),
  fetchVulnerabilityData: (indicator) => dispatch(ACTIONS.VULNERABILITY.fetchVulnerabilityData(indicator))
});

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(VulnerabilityMap);
